/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* left, ListNode* right) {
    ListNode dummy(0);
    ListNode* current = &dummy;

    while (left && right) {
        if (left->val < right->val) {
            current->next = left;
            left = left->next;
        } else {
            current->next = right;
            right = right->next;
        }
        current = current->next;
    }

    current->next = (left != nullptr) ? left : right;
    return dummy.next;
    }

    ListNode* mergeSort(ListNode* head) {
    if (!head || !head->next) {
        return head;
    }

    // Find the middle of the linked list
    ListNode* slow = head;
    ListNode* fast = head->next;
    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }

    ListNode* right = mergeSort(slow->next);
    slow->next = nullptr;  // Split the linked list into two halves
    ListNode* left = mergeSort(head);

    return merge(left, right);
    }

    ListNode* sortList(ListNode* head) {
    return mergeSort(head);
    }
};
//tle
// ListNode* curr = head;
        
//         while(curr){
//             ListNode* temp = head;
//             while (temp && temp->next) {
//             if (temp->val > temp->next->val) {
//                 swap(temp->val, temp->next->val);
//             }
//             else  temp = temp->next;
//         }

//         curr = curr->next;
//     }

//     return head;