class Solution {
public:
    void dfs(vector<vector<char>>& board, int i, int j, int index, const string& word, bool& found) {
    if (index == word.size()) {
        found = true;
        return;
    }
    
    if (i < 0 || i >= board.size() || j < 0 || j >= board[0].size() || board[i][j] != word[index]) {
        return;
    }

    char temp = board[i][j];
    board[i][j] = '#'; // Or any marker that's not in the word

    dfs(board, i+1, j, index+1, word, found);
    dfs(board, i-1, j, index+1, word, found);
    dfs(board, i, j+1, index+1, word, found);
    dfs(board, i, j-1, index+1, word, found);

    // Backtrack by restoring the original character
    board[i][j] = temp;
    }

    bool exist(vector<vector<char>>& board, string word) {
        if (board.empty() || word.empty()) return false;

        bool found = false;
        for (int i = 0; i < board.size(); i++) {
            for (int j = 0; j < board[0].size(); j++) {
                if (board[i][j] == word[0]) {
                    dfs(board, i, j, 0, word, found);
                    if (found) return true;
                }
            }
        }
        return false;
    }
};