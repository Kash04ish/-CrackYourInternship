Class Solution{
  public:
    // Function to return a list containing the DFS traversal of the graph.
    vector<int> dfsOfGraph(int V, vector<int> adj[]) {
        stack<int> st;
        vector<bool> vis(V, false);
        int src = 0;
        st.push(src);
        vector<int> ans;

        while (!st.empty()) {
            int node = st.top();
            st.pop();
            
            if (!vis[node]) {
                ans.push_back(node);
                vis[node] = true;
            }

            // To maintain the correct order, we need to push the neighbors in reverse order
            for (auto it = adj[node].rbegin(); it != adj[node].rend(); ++it) {
                if (!vis[*it]) {
                    st.push(*it);
                }
            }
        }
    
        return ans;
    }
};