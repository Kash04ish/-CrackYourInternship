class Solution {
public:
    void dfs(int node, vector<vector<int>>& connections, stack<int>& st, vector<bool>& vis) {
        vis[node] = true;
        for (auto &it : connections[node]) {
            if (!vis[it]) dfs(it, connections, st, vis);
        }
        st.push(node);
    }
    
    void dfs2(int node, vector<vector<int>>& connections, vector<bool>& vis) {
        vis[node] = true;
        for (auto &it : connections[node]) {
            if (!vis[it]) dfs2(it, connections, vis);
        }
    }

    int kosaraju(int V, vector<vector<int>>& connections) {
        vector<bool> vis(V, false);
        stack<int> st;
        // First DFS to fill the stack
        for (int i = 0; i < V; i++) {
            if (!vis[i]) dfs(i, connections, st, vis);
        } 
        // Create the reverse graph
        vector<vector<int>> connectionsRev(V);
        for (int i = 0; i < V; i++) {
            for (auto &it : connections[i]) {
                connectionsRev[it].push_back(i);
            }
        }
        // Second DFS on reversed graph to count SCCs
        vis.assign(V, false);
        int cnt = 0; 
        while (!st.empty()) {
            int node = st.top();
            st.pop();
            if (!vis[node]) {
                dfs2(node, connectionsRev, vis);
                cnt++;
            }
        }
        return cnt;
    }

    int makeConnected(int n, vector<vector<int>>& connections) {
        // Not enough edges
        if (connections.size() < n - 1) return -1;
        // Build the adjacency list
        vector<vector<int>> adjList(n);
        for (const auto& conn : connections) {
                int u = conn[0], v = conn[1];
                adjList[u].push_back(v);
                adjList[v].push_back(u);
        }
        int scc = kosaraju(n, adjList);
        return scc - 1;
    }
};
