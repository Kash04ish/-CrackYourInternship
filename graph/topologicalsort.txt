vector<int> topoSort(int V, vector<int> adj[]) {
    vector<int> ans;
    queue<int> q;
    unordered_map<int, int> indegree;

    // Initialize indegree for all vertices
    for (int i = 0; i < V; ++i) {
        for (auto nbr : adj[i]) {
            indegree[nbr]++;
        }
    }

    // Enqueue vertices with indegree 0
    for (int i = 0; i < V; ++i) {
        if (indegree[i] == 0) {
            q.push(i);
        }
    }

    // Perform BFS
    while (!q.empty()) {
        int frontNode = q.front();
        q.pop();
        ans.push_back(frontNode);

        // Update indegree of neighbors and enqueue if indegree becomes 0
        for (auto nbr : adj[frontNode]) {
            indegree[nbr]--;
            if (indegree[nbr] == 0) {
                q.push(nbr);
            }
        }
    }

    return ans; 
	}
